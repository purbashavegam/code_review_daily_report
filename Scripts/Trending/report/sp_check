import pandas as pd
# import numpy as np
# from pandas import to_datetime,DataFrame
import matplotlib.pyplot as plt
import json
from numpy import nan, int64
import os
from scipy.stats import linregress
import datetime
import logging
from datetime import timedelta
from matplotlib.ticker import MultipleLocator


# import timedelta
class TrendGenerator:
    def __init__(self, list_of_equips,MAC_ID):
        try:
            self.mac_id = MAC_ID
            self.list_mac_id_equips_weekly_report = list_of_equips
            self.equipment_list_with_sensor_id = []


            logging.info(f"TrendGenerator instance initialized with MAC_ID: {self.mac_id}")
        except Exception as e:
            logging.error("Error in Trend generator class: " + str(e))

    def calculate_average_for_axis(self, sheet_data, axis_name):
        try:
            # Assuming sheet_data has a 'DateTime' column and a 'Value' column
            sheet_data['DateTime'] = pd.to_datetime(sheet_data['DateTime'], format='%d/%m/%Y %I:%M %p')

            # Extract the correct axis name from the provided axis_name
            extracted_axis = axis_name.split('_')[-1]

            # Calculate the average for the 'Value' column
            if not sheet_data.empty:
                average_value = sheet_data['Value'].dropna().mean()
                #print(average_value, '/////////////////////////////')
                result_data = pd.DataFrame({'Axis': [extracted_axis], 'Average_Value': [average_value]})
                #print(result_data,'resultdataaaaaaaaaaaa line 37')
            else:
                logging.info(f"No data available for the specified time range for axis {extracted_axis}.")
                result_data = pd.DataFrame(columns=['Axis', 'Average_Value'])

            return result_data

        except Exception as e:
            logging.error(f"Error in calculate_average_for_axis: {e}")
            return pd.DataFrame(columns=['Axis', 'Average_Value'])

    def calculate_average_axis_wise(self, mac_id):
        try:
            excel_file_path = f'C:/Vegam/Trends_alert/outputs/vrms_data_{mac_id}.xlsx'
            df = pd.read_excel(excel_file_path, sheet_name=None)
            combined_equipment_sensor_ids = self.list_mac_id_equips_weekly_report if len(
                self.list_mac_id_equips_weekly_report) != 0 else "no data"

            df = pd.DataFrame({'EquipmentID_Sensor_ID': combined_equipment_sensor_ids})
            equip_details_df = df[['EquipmentID_Sensor_ID']]
            self.equipment_list_with_sensor_id = equip_details_df['EquipmentID_Sensor_ID'].tolist()
            avg = {}
            for equip, equipment_id in enumerate(self.equipment_list_with_sensor_id):
                averages = {'Equipment ID': equipment_id, 'MAC_ID': mac_id}

            # Calculate average separately for each axis
            for sheet_name, sheet_data in df.items():
                if mac_id in sheet_name and '_' in sheet_name:
                    _, _, axis,_ = sheet_name.rsplit('_', 3)  # Extract axis from sheet name
                    #print(f"Sheet Name: {sheet_name}, Extracted Axis: {axis},macid:{mac_id}")
                    averages[axis] = self.calculate_average_for_axis(sheet_data, axis)['Average_Value'].mean()
                    logging.info(f"Successfully calculated average for axis: {axis}")

            return averages

        except Exception as e:
            logging.error(f"Error in calculate_average_axis_wise: {e}")

